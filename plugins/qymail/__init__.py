file: wechat_work_email_plugin.py

"""
ÂæÆ‰ø°‰ºÅ‰∏öÈÇÆÁÆ±ÁÆ°ÁêÜÊèí‰ª∂
ÁâàÊú¨: 1.0.0
‰ΩúËÄÖ: [ÊÇ®ÁöÑÂêçÁß∞]
ÂäüËÉΩ:
- ÂèØËßÜÂåñÊî∂Âèë‰ºÅ‰∏öÈÇÆ‰ª∂
- ÊîØÊåÅÈôÑ‰ª∂ÁÆ°ÁêÜ
- ÈÇÆ‰ª∂ÂÆöÊó∂Ê£ÄÊü•
- ÈÇÆ‰ª∂ÂàÜÁ±ªÂ±ïÁ§∫
- ÂÆâÂÖ®ÁöÑÂá≠ËØÅÂ≠òÂÇ®
"""

import imaplib
import smtplib
import email
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from datetime import datetime, timedelta
import pytz
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from typing import Any, List, Dict, Optional, Tuple

from app.core.config import settings
from app.plugins import _PluginBase
from app.log import logger
from app.schemas import NotificationType

class WeWorkEmail(_PluginBase):
    plugin_name = "ÂæÆ‰ø°‰ºÅ‰∏öÈÇÆÁÆ±ÁÆ°ÁêÜ"
    plugin_desc = "ÂèØËßÜÂåñÊî∂ÂèëÂæÆ‰ø°‰ºÅ‰∏öÈÇÆÁÆ±ÈÇÆ‰ª∂ÔºåÊîØÊåÅÈôÑ‰ª∂ÁÆ°ÁêÜ"
    plugin_icon = "https://example.com/email_icon.png"
    plugin_version = "1.0.0"
    plugin_author = "[Êó∂‰πüÂëΩ‰πü]"
    author_url = "https://github.com/beijingxiaokuoe"
    plugin_config_prefix = "wework_email_"
    plugin_order = 2
    auth_level = 2

    # ÁßÅÊúâÂ±ûÊÄß
    _enabled = False
    _account = None
    _password = None
    _imap_host = "imap.exmail.qq.com"
    _smtp_host = "smtp.exmail.qq.com"
    _check_interval = "*/10 * * * *"  # ÈªòËÆ§10ÂàÜÈíüÊ£ÄÊü•‰∏ÄÊ¨°
    _notify = True
    _scheduler: Optional[BackgroundScheduler] = None

    def init_plugin(self, config: dict = None):
        self.stop_service()

        if config:
            self._enabled = config.get("enabled")
            self._account = config.get("account")
            self._password = config.get("password")
            self._check_interval = config.get("check_interval", "*/10 * * * *")

        if self._enabled and self._validate_config():
            self._scheduler = BackgroundScheduler(timezone=settings.TZ)
            self._scheduler.add_job(
                self.check_email,
                trigger=CronTrigger.from_crontab(self._check_interval),
                id="wework_email_check"
            )
            self._scheduler.start()
            logger.info("ÂæÆ‰ø°‰ºÅ‰∏öÈÇÆÁÆ±Êèí‰ª∂Â∑≤ÂêØÂä®")

    def _validate_config(self) -> bool:
        """È™åËØÅÈÖçÁΩÆÊúâÊïàÊÄß"""
        if not all([self._account, self._password]):
            logger.error("ÈÇÆÁÆ±Ë¥¶Âè∑ÊàñÂØÜÁ†ÅÊú™ÈÖçÁΩÆ")
            return False
        return True

    def check_email(self):
        """Ê£ÄÊü•Êñ∞ÈÇÆ‰ª∂"""
        try:
            with imaplib.IMAP4_SSL(self._imap_host) as imap:
                imap.login(self._account, self._password)
                imap.select("INBOX")

                status, messages = imap.search(None, 'UNSEEN')
                if status == 'OK':
                    email_count = len(messages[0].split())
                    if email_count > 0:
                        self._send_notification(
                            title="üì¨ Êñ∞ÈÇÆ‰ª∂ÈÄöÁü•",
                            text=f"Ê£ÄÊµãÂà∞ {email_count} Â∞ÅÊú™ËØªÈÇÆ‰ª∂"
                        )
        except Exception as e:
            logger.error(f"Ê£ÄÊü•ÈÇÆ‰ª∂Â§±Ë¥•: {str(e)}")

    def send_email(self, to: str, subject: str, content: str, attachments: list = None) -> dict:
        """ÂèëÈÄÅÈÇÆ‰ª∂"""
        try:
            msg = MIMEMultipart()
            msg['From'] = self._account
            msg['To'] = to
            msg['Subject'] = subject
            msg.attach(MIMEText(content, 'html'))

            # ÈôÑ‰ª∂Â§ÑÁêÜ
            if attachments:
                for file in attachments:
                    part = MIMEText(file['content'])
                    part.add_header(
                        'Content-Disposition',
                        'attachment',
                        filename=file['name']
                    )
                    msg.attach(part)

            with smtplib.SMTP_SSL(self._smtp_host) as smtp:
                smtp.login(self._account, self._password)
                smtp.send_message(msg)
            
            return {"status": True, "message": "ÈÇÆ‰ª∂ÂèëÈÄÅÊàêÂäü"}
        except Exception as e:
            logger.error(f"ÈÇÆ‰ª∂ÂèëÈÄÅÂ§±Ë¥•: {str(e)}")
            return {"status": False, "message": str(e)}

    def get_recent_emails(self, limit=20) -> List[dict]:
        """Ëé∑ÂèñÊúÄËøëÈÇÆ‰ª∂"""
        emails = []
        try:
            with imaplib.IMAP4_SSL(self._imap_host) as imap:
                imap.login(self._account, self._password)
                imap.select("INBOX")

                status, messages = imap.search(None, 'ALL')
                if status == 'OK':
                    for num in messages[0].split()[:limit]:
                        status, data = imap.fetch(num, '(RFC822)')
                        if status == 'OK':
                            raw_email = data[0][1]
                            email_message = email.message_from_bytes(raw_email)
                            
                            email_info = {
                                'from': email_message['From'],
                                'subject': email_message['Subject'],
                                'date': email_message['Date'],
                                'content': self._parse_email_content(email_message)
                            }
                            emails.append(email_info)
        except Exception as e:
            logger.error(f"Ëé∑ÂèñÈÇÆ‰ª∂Â§±Ë¥•: {str(e)}")
        return emails

    def _parse_email_content(self, msg) -> str:
        """Ëß£ÊûêÈÇÆ‰ª∂ÂÜÖÂÆπ"""
        content = ""
        if msg.is_multipart():
            for part in msg.walk():
                content_type = part.get_content_type()
                if content_type == "text/plain":
                    content += part.get_payload(decode=True).decode()
        else:
            content = msg.get_payload(decode=True).decode()
        return content[:500] + "..."  # Êà™ÂèñÂâç500Â≠óÁ¨¶

    def _send_notification(self, title: str, text: str):
        """ÂèëÈÄÅÈÄöÁü•"""
        if self._notify:
            self.post_message(
                mtype=NotificationType.SiteMessage,
                title=title,
                text=text
            )

    def get_form(self) -> Tuple[List[dict], Dict[str, Any]]:
        return [
            {
                'component': 'VForm',
                'content': [
                    {
                        'component': 'VRow',
                        'content': [
                            {
                                'component': 'VCol',
                                'props': {'cols': 12, 'md': 6},
                                'content': [
                                    {
                                        'component': 'VTextField',
                                        'props': {
                                            'model': 'account',
                                            'label': '‰ºÅ‰∏öÈÇÆÁÆ±',
                                            'placeholder': 'user@company.com'
                                        }
                                    }
                                ]
                            },
                            {
                                'component': 'VCol',
                                'props': {'cols': 12, 'md': 6},
                                'content': [
                                    {
                                        'component': 'VTextField',
                                        'props': {
                                            'model': 'password',
                                            'label': 'ÊéàÊùÉÂØÜÁ†Å',
                                            'type': 'password'
                                        }
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        'component': 'VRow',
                        'content': [
                            {
                                'component': 'VCol',
                                'props': {'cols': 12},
                                'content': [
                                    {
                                        'component': 'VCronField',
                                        'props': {
                                            'model': 'check_interval',
                                            'label': 'ÈÇÆ‰ª∂Ê£ÄÊü•È¢ëÁéá'
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ], {
            "enabled": False,
            "account": "",
            "password": "",
            "check_interval": "*/10 * * * *"
        }

    def get_page(self) -> List[dict]:
        """ÈÇÆ‰ª∂ÂàóË°®È°µÈù¢"""
        emails = self.get_recent_emails()
        rows = []
        for email in emails:
            rows.append({
                'component': 'tr',
                'content': [
                    {'component': 'td', 'text': email['from']},
                    {'component': 'td', 'text': email['subject']},
                    {'component': 'td', 'text': email['date']},
                    {
                        'component': 'td',
                        'content': [{
                            'component': 'VBtn',
                            'props': {
                                'small': True,
                                'variant': 'tonal',
                                'onClick': f'window.showEmailDetail({email})'
                            },
                            'text': 'Êü•ÁúãËØ¶ÊÉÖ'
                        }]
                    }
                ]
            })

        return [{
            'component': 'VCard',
            'content': [
                {
                    'component': 'VCardTitle',
                    'text': 'üìß ÊúÄËøëÈÇÆ‰ª∂'
                },
                {
                    'component': 'VCardText',
                    'content': [{
                        'component': 'VTable',
                        'props': {'hover': True},
                        'content': [
                            {
                                'component': 'thead',
                                'content': [{
                                    'component': 'tr',
                                    'content': [
                                        {'component': 'th', 'text': 'Âèë‰ª∂‰∫∫'},
                                        {'component': 'th', 'text': '‰∏ªÈ¢ò'},
                                        {'component': 'th', 'text': 'Êó•Êúü'},
                                        {'component': 'th', 'text': 'Êìç‰Ωú'}
                                    ]
                                }]
                            },
                            {
                                'component': 'tbody',
                                'content': rows
                            }
                        ]
                    }]
                }
            ]
        }]

    def stop_service(self):
        if self._scheduler:
            self._scheduler.remove_all_jobs()
            if self._scheduler.running:
                self._scheduler.shutdown()
            self._scheduler = None
